YOUR EXECUTABLE --MUST-- BE NAMED "matrixmult"

SETUP:

  Save the directory containing timing and all of the included
  filed in the same directory as your executable.

  I believe that you need to have . added to your PATH but am
  not certain.

  In order for the script to work you must create several files.
  These files need to follow the naming scheme 'Npcs' where N is
  the number of hosts listed in the file. 

  For example the file 3pcs would contain the following:
  o251-02
  o251-03
  o251-04


  Or the file 2pcs would contain:
  o251-12
  o251-13

  etc

  2pcs is used for 4 core timing runs and 4pcs is used for 8
  core timing runs and so on.

  You need to create 2pcs, 4pcs, 6pcs, 8pcs, and 10pcs. Save 
  these files in the hostfiles directory, you do not need to make
  a hostfile for 1pc the script doesn't require it.

RUNNING:

  The script "timing" can take one of the following flags:
  -ijk -ikj -kij -all

  -all will run all 90 timing runs.
  5 runs per comm_sz * 6 comm_sz * 3 forms

  The other three flags will run the 30 timing runs corresponding
  to the flag used.

  You do not need to interact with the script. The hostfiles 
  directory contains several input files and it should direct them
  into your program based on the form used.

RESULTS:

  All results are saved in the Results directory and each
  permutaion of form and comm_sz will have its own file containing
  the output of all five of its timing runs.

  There is a sample result file included in the results directory.

                  --------IMPORTANT----------

  THE SCRIPT JUST REDIRECTS THE OUTPUT OF YOUR PROGRAM TO THE 
  OUTPUT FILES. MAKE SURE YOUR PROGRAM IS NOT PRINTING THE 
  MATRICES AND IS ONLY OUTPUTING THE COMM_SZ AND THE RUN TIME.

                  --------IMPORTANT----------

OTHER:

  The "load" script will ssh into each lab machine and give you
  its current load and list how many users are currently doing
  timing runs so you can avoid conflicts. The three numbers
  after average load: represent the avg load level over the last
  one, five, and fifteen minutes respectively. A load of 2.0 is
  equal to 100% ustilization on a dual core machine.

  The "cpu" script will do the same as load but for just the 
  current machine.

  If you use this I recommeond not using the -all flag as it will
  take a long time and provide more room for something crazy to 
  happen. You can also go into the script and comment out for 
  loops if you only want to run certain tests.

  The script will tell you when it starts a new batch of five 
  runs for each permutation of form and P so you get an idea of
  its progress. It also will count the five runs per permutation
  as it steps through them.
